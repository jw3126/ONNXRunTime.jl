var documenterSearchIndex = {"docs":
[{"location":"api/#High-level-API","page":"API","title":"High level API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [ONNXRunTime]\nprivate = false\npublic = true","category":"page"},{"location":"api/#ONNXRunTime.InferenceSession","page":"API","title":"ONNXRunTime.InferenceSession","text":"(o::InferenceSession)(inputs [,output_names])\n\nRun an InferenceSession on a collection of inputs. Here inputs can either be a NamedTuple or an AbstractDict. Optionally output_names can be passed. In this case only the outputs whose names are contained in output_names are computed.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.InferenceSession-2","page":"API","title":"ONNXRunTime.InferenceSession","text":"struct InferenceSession\n\nRepresents an infernence session. Should only be created by calling load_inference.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.load_inference-Tuple{AbstractString}","page":"API","title":"ONNXRunTime.load_inference","text":"load_inference(path::AbstractString; execution_provider, envname) -> InferenceSession\n\n\n\n\n\n\n","category":"method"},{"location":"api/#Low-level-API","page":"API","title":"Low level API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [ONNXRunTime.CAPI]\nprivate = false\npublic = true","category":"page"},{"location":"api/#ONNXRunTime.CAPI","page":"API","title":"ONNXRunTime.CAPI","text":"module CAPI\n\nThis module closely follows the offical onnxruntime C-API. See here for a C code example.\n\n\n\n\n\n","category":"module"},{"location":"api/#ONNXRunTime.CAPI.ONNXTensorElementDataType","page":"API","title":"ONNXRunTime.CAPI.ONNXTensorElementDataType","text":"ONNXRunTime.CAPI.ONNXTensorElementDataType\n\nCEnum with possible values:\n\nONNXTENSORELEMENTDATATYPE_UNDEFINED\nONNXTENSORELEMENTDATATYPE_FLOAT\nONNXTENSORELEMENTDATATYPE_UINT8\nONNXTENSORELEMENTDATATYPE_INT8\nONNXTENSORELEMENTDATATYPE_UINT16\nONNXTENSORELEMENTDATATYPE_INT16\nONNXTENSORELEMENTDATATYPE_INT32\nONNXTENSORELEMENTDATATYPE_INT64\nONNXTENSORELEMENTDATATYPE_STRING\nONNXTENSORELEMENTDATATYPE_BOOL\nONNXTENSORELEMENTDATATYPE_FLOAT16\nONNXTENSORELEMENTDATATYPE_DOUBLE\nONNXTENSORELEMENTDATATYPE_UINT32\nONNXTENSORELEMENTDATATYPE_UINT64\nONNXTENSORELEMENTDATATYPE_COMPLEX64\nONNXTENSORELEMENTDATATYPE_COMPLEX128\nONNXTENSORELEMENTDATATYPE_BFLOAT16\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtAllocator","page":"API","title":"ONNXRunTime.CAPI.OrtAllocator","text":"ONNXRunTime.CAPI.OrtAllocator\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtAllocator.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtAllocatorType","page":"API","title":"ONNXRunTime.CAPI.OrtAllocatorType","text":"ONNXRunTime.CAPI.OrtAllocatorType\n\nCEnum with possible values:\n\nInvalid\nOrtDeviceAllocator\nOrtArenaAllocator\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtApi","page":"API","title":"ONNXRunTime.CAPI.OrtApi","text":"struct OrtApi\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtApiBase","page":"API","title":"ONNXRunTime.CAPI.OrtApiBase","text":"struct OrtApiBase\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtArenaCfg","page":"API","title":"ONNXRunTime.CAPI.OrtArenaCfg","text":"ONNXRunTime.CAPI.OrtArenaCfg\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtArenaCfg.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtCUDAProviderOptions","page":"API","title":"ONNXRunTime.CAPI.OrtCUDAProviderOptions","text":"struct OrtCUDAProviderOptions\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtCUDAProviderOptions-Tuple{}","page":"API","title":"ONNXRunTime.CAPI.OrtCUDAProviderOptions","text":"OrtCUDAProviderOptions(; device_id, cudnn_conv_algo_search, gpu_mem_limit, arena_extend_strategy, do_copy_in_default_stream, has_user_compute_stream, user_compute_stream, default_memory_arena_cfg) -> ONNXRunTime.CAPI.OrtCUDAProviderOptions\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.OrtCudnnConvAlgoSearch","page":"API","title":"ONNXRunTime.CAPI.OrtCudnnConvAlgoSearch","text":"ONNXRunTime.CAPI.OrtCudnnConvAlgoSearch\n\nCEnum with possible values:\n\nEXHAUSTIVE\nHEURISTIC\nDEFAULT\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtCustomOpDomain","page":"API","title":"ONNXRunTime.CAPI.OrtCustomOpDomain","text":"ONNXRunTime.CAPI.OrtCustomOpDomain\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtCustomOpDomain.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtEnv","page":"API","title":"ONNXRunTime.CAPI.OrtEnv","text":"ONNXRunTime.CAPI.OrtEnv\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtEnv.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtIoBinding","page":"API","title":"ONNXRunTime.CAPI.OrtIoBinding","text":"ONNXRunTime.CAPI.OrtIoBinding\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtIoBinding.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtLoggingLevel","page":"API","title":"ONNXRunTime.CAPI.OrtLoggingLevel","text":"ONNXRunTime.CAPI.OrtLoggingLevel\n\nCEnum with possible values:\n\nORTLOGGINGLEVEL_VERBOSE\nORTLOGGINGLEVEL_INFO\nORTLOGGINGLEVEL_WARNING\nORTLOGGINGLEVEL_ERROR\nORTLOGGINGLEVEL_FATAL\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtMapTypeInfo","page":"API","title":"ONNXRunTime.CAPI.OrtMapTypeInfo","text":"ONNXRunTime.CAPI.OrtMapTypeInfo\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtMapTypeInfo.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtMemType","page":"API","title":"ONNXRunTime.CAPI.OrtMemType","text":"ONNXRunTime.CAPI.OrtMemType\n\nCEnum with possible values:\n\nOrtMemTypeCPUInput\nOrtMemTypeCPUOutput\nOrtMemTypeCPUOutput\nOrtMemTypeDefault\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtMemoryInfo","page":"API","title":"ONNXRunTime.CAPI.OrtMemoryInfo","text":"ONNXRunTime.CAPI.OrtMemoryInfo\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtMemoryInfo.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtModelMetadata","page":"API","title":"ONNXRunTime.CAPI.OrtModelMetadata","text":"ONNXRunTime.CAPI.OrtModelMetadata\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtModelMetadata.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtPrepackedWeightsContainer","page":"API","title":"ONNXRunTime.CAPI.OrtPrepackedWeightsContainer","text":"ONNXRunTime.CAPI.OrtPrepackedWeightsContainer\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtPrepackedWeightsContainer.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtRunOptions","page":"API","title":"ONNXRunTime.CAPI.OrtRunOptions","text":"ONNXRunTime.CAPI.OrtRunOptions\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtRunOptions.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtSequenceTypeInfo","page":"API","title":"ONNXRunTime.CAPI.OrtSequenceTypeInfo","text":"ONNXRunTime.CAPI.OrtSequenceTypeInfo\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtSequenceTypeInfo.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtSession","page":"API","title":"ONNXRunTime.CAPI.OrtSession","text":"ONNXRunTime.CAPI.OrtSession\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtSession.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtSessionOptions","page":"API","title":"ONNXRunTime.CAPI.OrtSessionOptions","text":"ONNXRunTime.CAPI.OrtSessionOptions\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtSessionOptions.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtStatus","page":"API","title":"ONNXRunTime.CAPI.OrtStatus","text":"ONNXRunTime.CAPI.OrtStatus\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtStatus.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtTensorTypeAndShapeInfo","page":"API","title":"ONNXRunTime.CAPI.OrtTensorTypeAndShapeInfo","text":"ONNXRunTime.CAPI.OrtTensorTypeAndShapeInfo\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtTensorTypeAndShapeInfo.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtThreadingOptions","page":"API","title":"ONNXRunTime.CAPI.OrtThreadingOptions","text":"ONNXRunTime.CAPI.OrtThreadingOptions\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtThreadingOptions.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtTypeInfo","page":"API","title":"ONNXRunTime.CAPI.OrtTypeInfo","text":"ONNXRunTime.CAPI.OrtTypeInfo\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtTypeInfo.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.OrtValue","page":"API","title":"ONNXRunTime.CAPI.OrtValue","text":"ONNXRunTime.CAPI.OrtValue\n\nWraps a pointer to the C object of type ONNXRunTime.CAPI.OrtValue.\n\n\n\n\n\n","category":"type"},{"location":"api/#ONNXRunTime.CAPI.AllocatorFree-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtAllocator, Ptr}","page":"API","title":"ONNXRunTime.CAPI.AllocatorFree","text":"AllocatorFree(api::ONNXRunTime.CAPI.OrtApi, allocator::ONNXRunTime.CAPI.OrtAllocator, ptr::Ptr)\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.CreateAllocator-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtSession, ONNXRunTime.CAPI.OrtMemoryInfo}","page":"API","title":"ONNXRunTime.CAPI.CreateAllocator","text":"CreateAllocator(api::ONNXRunTime.CAPI.OrtApi, session::ONNXRunTime.CAPI.OrtSession, meminfo::ONNXRunTime.CAPI.OrtMemoryInfo) -> ONNXRunTime.CAPI.OrtAllocator\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.CreateArenaCfgV2-Tuple{ONNXRunTime.CAPI.OrtApi, Any, Any}","page":"API","title":"ONNXRunTime.CAPI.CreateArenaCfgV2","text":"CreateArenaCfgV2(api::ONNXRunTime.CAPI.OrtApi, keys, vals) -> ONNXRunTime.CAPI.OrtArenaCfg\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.CreateCpuMemoryInfo-Tuple{ONNXRunTime.CAPI.OrtApi}","page":"API","title":"ONNXRunTime.CAPI.CreateCpuMemoryInfo","text":"CreateCpuMemoryInfo(api::ONNXRunTime.CAPI.OrtApi; allocator_type, mem_type) -> ONNXRunTime.CAPI.OrtMemoryInfo\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.CreateEnv-Tuple{ONNXRunTime.CAPI.OrtApi}","page":"API","title":"ONNXRunTime.CAPI.CreateEnv","text":"CreateEnv(api::ONNXRunTime.CAPI.OrtApi; logging_level, name)\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.CreateRunOptions-Tuple{ONNXRunTime.CAPI.OrtApi}","page":"API","title":"ONNXRunTime.CAPI.CreateRunOptions","text":"CreateRunOptions(api::ONNXRunTime.CAPI.OrtApi) -> ONNXRunTime.CAPI.OrtRunOptions\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.CreateSession-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtEnv, AbstractString, ONNXRunTime.CAPI.OrtSessionOptions}","page":"API","title":"ONNXRunTime.CAPI.CreateSession","text":"CreateSession(api::ONNXRunTime.CAPI.OrtApi, env::ONNXRunTime.CAPI.OrtEnv, model_path::AbstractString, options::ONNXRunTime.CAPI.OrtSessionOptions) -> ONNXRunTime.CAPI.OrtSession\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.CreateSessionOptions-Tuple{ONNXRunTime.CAPI.OrtApi}","page":"API","title":"ONNXRunTime.CAPI.CreateSessionOptions","text":"CreateSessionOptions(api::ONNXRunTime.CAPI.OrtApi) -> ONNXRunTime.CAPI.OrtSessionOptions\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.CreateTensorWithDataAsOrtValue-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtMemoryInfo, Vector, Any}","page":"API","title":"ONNXRunTime.CAPI.CreateTensorWithDataAsOrtValue","text":"CreateTensorWithDataAsOrtValue(api::ONNXRunTime.CAPI.OrtApi, memory_info::ONNXRunTime.CAPI.OrtMemoryInfo, data::Vector, shape) -> ONNXRunTime.CAPI.OrtValue\n\n\nReturn a tensor with shape shape that is backed by the memory of data.\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.Free-Tuple{ONNXRunTime.CAPI.OrtAllocator, Union{Cstring, Ptr}}","page":"API","title":"ONNXRunTime.CAPI.Free","text":"Free(alloc::ONNXRunTime.CAPI.OrtAllocator, ptr::Union{Cstring, Ptr})\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.GetApi","page":"API","title":"ONNXRunTime.CAPI.GetApi","text":"GetApi(api_base::ONNXRunTime.CAPI.OrtApiBase) -> ONNXRunTime.CAPI.OrtApi\nGetApi(api_base::ONNXRunTime.CAPI.OrtApiBase, ort_api_version::Integer) -> ONNXRunTime.CAPI.OrtApi\n\n\n\n\n\n\n","category":"function"},{"location":"api/#ONNXRunTime.CAPI.GetDimensions","page":"API","title":"ONNXRunTime.CAPI.GetDimensions","text":"GetDimensions(api::ONNXRunTime.CAPI.OrtApi, o::ONNXRunTime.CAPI.OrtTensorTypeAndShapeInfo) -> Vector{Int64}\nGetDimensions(api::ONNXRunTime.CAPI.OrtApi, o::ONNXRunTime.CAPI.OrtTensorTypeAndShapeInfo, ndims) -> Vector{Int64}\n\n\n\n\n\n\n","category":"function"},{"location":"api/#ONNXRunTime.CAPI.GetDimensionsCount-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtTensorTypeAndShapeInfo}","page":"API","title":"ONNXRunTime.CAPI.GetDimensionsCount","text":"GetDimensionsCount(api::ONNXRunTime.CAPI.OrtApi, o::ONNXRunTime.CAPI.OrtTensorTypeAndShapeInfo) -> UInt64\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.GetErrorMessage-Tuple{ONNXRunTime.CAPI.OrtApi, Ptr{Nothing}}","page":"API","title":"ONNXRunTime.CAPI.GetErrorMessage","text":"GetErrorMessage(api::ONNXRunTime.CAPI.OrtApi, status::Ptr{Nothing}) -> String\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.GetTensorElementType-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtTensorTypeAndShapeInfo}","page":"API","title":"ONNXRunTime.CAPI.GetTensorElementType","text":"GetTensorElementType(api::ONNXRunTime.CAPI.OrtApi, o::ONNXRunTime.CAPI.OrtTensorTypeAndShapeInfo) -> ONNXRunTime.CAPI.ONNXTensorElementDataType\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.GetTensorMutableData-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtValue}","page":"API","title":"ONNXRunTime.CAPI.GetTensorMutableData","text":"GetTensorMutableData(api::ONNXRunTime.CAPI.OrtApi, tensor::ONNXRunTime.CAPI.OrtValue) -> PermutedDimsArray\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.GetTensorTypeAndShape-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtValue}","page":"API","title":"ONNXRunTime.CAPI.GetTensorTypeAndShape","text":"GetTensorTypeAndShape(api::ONNXRunTime.CAPI.OrtApi, o::ONNXRunTime.CAPI.OrtValue) -> ONNXRunTime.CAPI.OrtTensorTypeAndShapeInfo\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.GetVersionString-Tuple{ONNXRunTime.CAPI.OrtApiBase}","page":"API","title":"ONNXRunTime.CAPI.GetVersionString","text":"GetVersionString(api_base::ONNXRunTime.CAPI.OrtApiBase) -> String\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.IsTensor-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtValue}","page":"API","title":"ONNXRunTime.CAPI.IsTensor","text":"IsTensor(api::ONNXRunTime.CAPI.OrtApi, val::ONNXRunTime.CAPI.OrtValue) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.OrtGetApiBase-Tuple{}","page":"API","title":"ONNXRunTime.CAPI.OrtGetApiBase","text":"OrtGetApiBase(; execution_provider) -> ONNXRunTime.CAPI.OrtApiBase\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.Run-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtSession, Union{Nothing, ONNXRunTime.CAPI.OrtRunOptions}, Vector{String}, Vector{ONNXRunTime.CAPI.OrtValue}, Vector{String}}","page":"API","title":"ONNXRunTime.CAPI.Run","text":"Run(api::ONNXRunTime.CAPI.OrtApi, session::ONNXRunTime.CAPI.OrtSession, run_options::Union{Nothing, ONNXRunTime.CAPI.OrtRunOptions}, input_names::Vector{String}, inputs::Vector{ONNXRunTime.CAPI.OrtValue}, output_names::Vector{String}) -> Vector{ONNXRunTime.CAPI.OrtValue}\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.SessionGetInputCount-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtSession}","page":"API","title":"ONNXRunTime.CAPI.SessionGetInputCount","text":"SessionGetInputCount(api::ONNXRunTime.CAPI.OrtApi, session::ONNXRunTime.CAPI.OrtSession) -> UInt64\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.SessionGetInputName-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtSession, Integer, ONNXRunTime.CAPI.OrtAllocator}","page":"API","title":"ONNXRunTime.CAPI.SessionGetInputName","text":"SessionGetInputName(api::ONNXRunTime.CAPI.OrtApi, session::ONNXRunTime.CAPI.OrtSession, index::Integer, allocator::ONNXRunTime.CAPI.OrtAllocator) -> String\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.SessionGetModelMetadata-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtSession}","page":"API","title":"ONNXRunTime.CAPI.SessionGetModelMetadata","text":"SessionGetModelMetadata(api::ONNXRunTime.CAPI.OrtApi, session::ONNXRunTime.CAPI.OrtSession) -> ONNXRunTime.CAPI.OrtModelMetadata\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.SessionGetOutputCount-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtSession}","page":"API","title":"ONNXRunTime.CAPI.SessionGetOutputCount","text":"SessionGetOutputCount(api::ONNXRunTime.CAPI.OrtApi, sess::ONNXRunTime.CAPI.OrtSession) -> UInt64\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.SessionGetOutputName-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtSession, Integer, ONNXRunTime.CAPI.OrtAllocator}","page":"API","title":"ONNXRunTime.CAPI.SessionGetOutputName","text":"SessionGetOutputName(api::ONNXRunTime.CAPI.OrtApi, session::ONNXRunTime.CAPI.OrtSession, index::Integer, allocator::ONNXRunTime.CAPI.OrtAllocator) -> String\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.SessionOptionsAppendExecutionProvider_CUDA-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtSessionOptions, ONNXRunTime.CAPI.OrtCUDAProviderOptions}","page":"API","title":"ONNXRunTime.CAPI.SessionOptionsAppendExecutionProvider_CUDA","text":"SessionOptionsAppendExecutionProvider_CUDA(api::ONNXRunTime.CAPI.OrtApi, session_options::ONNXRunTime.CAPI.OrtSessionOptions, cuda_options::ONNXRunTime.CAPI.OrtCUDAProviderOptions)\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.into_julia-Union{Tuple{T}, Tuple{Type{T}, ONNXRunTime.CAPI.OrtApi, Ref{Ptr{Nothing}}, Ptr{Nothing}, Any}} where T","page":"API","title":"ONNXRunTime.CAPI.into_julia","text":"into_julia(_::Type{T}, api::ONNXRunTime.CAPI.OrtApi, objptr::Ref{Ptr{Nothing}}, status_ptr::Ptr{Nothing}, gchandles) -> Any\n\n\nCreate a julia object from the output of an api call. Check and release status_ptr.\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.juliatype-Tuple{ONNXRunTime.CAPI.ONNXTensorElementDataType}","page":"API","title":"ONNXRunTime.CAPI.juliatype","text":"juliatype(onnx::ONNXRunTime.CAPI.ONNXTensorElementDataType) -> Type\n\n\n\n\n\n\n","category":"method"},{"location":"api/#ONNXRunTime.CAPI.release","page":"API","title":"ONNXRunTime.CAPI.release","text":"release(api::OrtApi, obj)::Nothing\n\nRelease memory owned by obj. The garbage collector should call this function automatically. If it does not that's a bug that should be reported.\n\nThere might however be situations with high memory pressure. In these situations it might help to call this function manually to release memory earlier. Using an object after releasing it is undefined behaviour.\n\n\n\n\n\n","category":"function"},{"location":"api/#ONNXRunTime.CAPI.unsafe_GetTensorMutableData-Tuple{ONNXRunTime.CAPI.OrtApi, ONNXRunTime.CAPI.OrtValue}","page":"API","title":"ONNXRunTime.CAPI.unsafe_GetTensorMutableData","text":"unsafe_GetTensorMutableData(api::ONNXRunTime.CAPI.OrtApi, tensor::ONNXRunTime.CAPI.OrtValue) -> PermutedDimsArray\n\n\nThis function is unsafe, because its output points to memory owned by tensor. After tensor is released, accessing the output becomes undefined behaviour.\n\n\n\n\n\n","category":"method"},{"location":"explanation/#Explanation","page":"Explanation","title":"Explanation","text":"","category":"section"},{"location":"explanation/#Memory-layout","page":"Explanation","title":"Memory layout","text":"","category":"section"},{"location":"explanation/","page":"Explanation","title":"Explanation","text":"onnxruntime expects tensors in with memory in C-layout. The julia Array type is in Fortran-layout however. The high level api automagically handles the layout conversions between julia and onnxruntime. In the low level api the programmer is responsible to do the conversions.","category":"page"},{"location":"explanation/","page":"Explanation","title":"Explanation","text":"For instance consider the \"copy2d.onnx\", which just returns a copy of its input:","category":"page"},{"location":"explanation/","page":"Explanation","title":"Explanation","text":"using ONNXRunTime\npath = ONNXRunTime.testdatapath(\"copy2d.onnx\")\nmodel = load_inference(path);\nx = [1 2 3; 4 5 6]\ny = model((input=x,)).output\n@test x == y","category":"page"},{"location":"explanation/","page":"Explanation","title":"Explanation","text":"Under the hood the following happens. We start with the julia matrix:","category":"page"},{"location":"explanation/","page":"Explanation","title":"Explanation","text":"# julia : [1 2 3;4 5 6]\n# memory: 1 4 2 5 3 6","category":"page"},{"location":"explanation/","page":"Explanation","title":"Explanation","text":"As a preprocessing step this array is copied to C layout:","category":"page"},{"location":"explanation/","page":"Explanation","title":"Explanation","text":"# julia : [1 3 5; 2 4 6]\n# memory: 1 2 3 4 5 6","category":"page"},{"location":"explanation/","page":"Explanation","title":"Explanation","text":"Then onnxruntime is invoked producing an output in C layout:","category":"page"},{"location":"explanation/","page":"Explanation","title":"Explanation","text":"# julia : [1 3 5; 2 4 6]\n# memory: 1 2 3 4 5 6","category":"page"},{"location":"explanation/","page":"Explanation","title":"Explanation","text":"Finally as a post processing step this converted to fortran layout:","category":"page"},{"location":"explanation/","page":"Explanation","title":"Explanation","text":"# julia [1 2 3; 4 5 6]\n# memory: 1 4 2 5 3 6","category":"page"},{"location":"#ONNXRunTime","page":"Home","title":"ONNXRunTime","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"ONNXRunTime provides inofficial julia bindings for onnxruntime. It exposes both a low level interface, that mirrors the official C-API, as well as an high level interface.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Contributions are welcome.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The high level API works as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"\njulia> import ONNXRunTime as OX\n\njulia> path = OX.testdatapath(\"increment2x3.onnx\"); # path to a toy model\n\njulia> model = OX.load_inference(path);\n\njulia> input = Dict(\"input\" => randn(Float32,2,3))\nDict{String, Matrix{Float32}} with 1 entry:\n  \"input\" => [1.68127 1.18192 -0.474021; -1.13518 1.02199 2.75168]\n\njulia> model(input)\nDict{String, Matrix{Float32}} with 1 entry:\n  \"output\" => [2.68127 2.18192 0.525979; -0.135185 2.02199 3.75168]","category":"page"},{"location":"","page":"Home","title":"Home","text":"For GPU usage simply do:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add CUDA\n\njulia> import CUDA\n\njulia> OX.load_inference(path, execution_provider=:cuda)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The low level API mirrors the offical C-API. The above example looks like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ONNXRunTime.CAPI\nusing ONNXRunTime: testdatapath\n\napi = GetApi();\nenv = CreateEnv(api, name=\"myenv\");\nso = CreateSessionOptions(api);\npath = testdatapath(\"increment2x3.onnx\");\nsession = CreateSession(api, env, path, so);\nmem = CreateCpuMemoryInfo(api);\ninput_array = randn(Float32, 2,3)\ninput_tensor = CreateTensorWithDataAsOrtValue(api, mem, vec(input_array), size(input_array));\nrun_options = CreateRunOptions(api);\ninput_names = [\"input\"];\noutput_names = [\"output\"];\ninputs = [input_tensor];\noutputs = Run(api, session, run_options, input_names, inputs, output_names);\noutput_tensor = only(outputs);\noutput_array = GetTensorMutableData(api, output_tensor);","category":"page"},{"location":"#Alternatives","page":"Home","title":"Alternatives","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Use the onnxruntime python bindings via PyCall.jl.\nONNX.jl\nONNXNaiveNASflux.jl","category":"page"}]
}
